// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  session               Session[]
  like                  Like[]
  bookmarks             Bookmark[]
  posts                 Post[]
  Following             Follow[]       @relation("Following")
  Followers             Follow[]       @relation("Followers")
  createdAt             DateTime       @default(now())
  Comment               Comment[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
  Participant           Participant[]
  Message               Message[]
  Conversation          Conversation[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", references: [id], fields: [followerId], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", references: [id], fields: [followingId], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  attachments         Media[]
  images              String[]
  likes               Like[]
  bookmarks           Bookmark[]
  user                User           @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt           DateTime       @default(now())
  Comment             Comment[]
  linkedNotifications Notification[]

  @@map("posts")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@map("notifications")
}

model Conversation {
  id            String        @id @default(cuid())
  createdById   String
  createdByUser User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  participants  Participant[]
  messages      Message[]
  createdAt     DateTime      @default(now())

  @@map("conversations")
}

model Participant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("participants")
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  status         MessageStatus @default(SENT)
  createdAt      DateTime      @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
